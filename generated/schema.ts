// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Indexer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Indexer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Indexer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Indexer", id.toString(), this);
    }
  }

  static load(id: string): Indexer | null {
    return changetype<Indexer | null>(store.get("Indexer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalGRT(): BigInt {
    let value = this.get("totalGRT");
    return value!.toBigInt();
  }

  set totalGRT(value: BigInt) {
    this.set("totalGRT", Value.fromBigInt(value));
  }

  get totalGRTNormalized(): BigDecimal {
    let value = this.get("totalGRTNormalized");
    return value!.toBigDecimal();
  }

  set totalGRTNormalized(value: BigDecimal) {
    this.set("totalGRTNormalized", Value.fromBigDecimal(value));
  }

  get totalUSD(): BigDecimal {
    let value = this.get("totalUSD");
    return value!.toBigDecimal();
  }

  set totalUSD(value: BigDecimal) {
    this.set("totalUSD", Value.fromBigDecimal(value));
  }

  get costBasis(): BigDecimal {
    let value = this.get("costBasis");
    return value!.toBigDecimal();
  }

  set costBasis(value: BigDecimal) {
    this.set("costBasis", Value.fromBigDecimal(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get weeklyData(): Array<string> | null {
    let value = this.get("weeklyData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set weeklyData(value: Array<string> | null) {
    if (!value) {
      this.unset("weeklyData");
    } else {
      this.set("weeklyData", Value.fromStringArray(<Array<string>>value));
    }
  }

  get indexingRewardsCut(): BigDecimal {
    let value = this.get("indexingRewardsCut");
    return value!.toBigDecimal();
  }

  set indexingRewardsCut(value: BigDecimal) {
    this.set("indexingRewardsCut", Value.fromBigDecimal(value));
  }

  get queryFeeCut(): BigDecimal {
    let value = this.get("queryFeeCut");
    return value!.toBigDecimal();
  }

  set queryFeeCut(value: BigDecimal) {
    this.set("queryFeeCut", Value.fromBigDecimal(value));
  }
}

export class WeeklyData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WeeklyData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WeeklyData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WeeklyData", id.toString(), this);
    }
  }

  static load(id: string): WeeklyData | null {
    return changetype<WeeklyData | null>(store.get("WeeklyData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get week(): i32 {
    let value = this.get("week");
    return value!.toI32();
  }

  set week(value: i32) {
    this.set("week", Value.fromI32(value));
  }

  get totalGRT(): BigInt {
    let value = this.get("totalGRT");
    return value!.toBigInt();
  }

  set totalGRT(value: BigInt) {
    this.set("totalGRT", Value.fromBigInt(value));
  }

  get totalGRTNormalized(): BigDecimal {
    let value = this.get("totalGRTNormalized");
    return value!.toBigDecimal();
  }

  set totalGRTNormalized(value: BigDecimal) {
    this.set("totalGRTNormalized", Value.fromBigDecimal(value));
  }

  get totalUSD(): BigDecimal {
    let value = this.get("totalUSD");
    return value!.toBigDecimal();
  }

  set totalUSD(value: BigDecimal) {
    this.set("totalUSD", Value.fromBigDecimal(value));
  }

  get costBasis(): BigDecimal {
    let value = this.get("costBasis");
    return value!.toBigDecimal();
  }

  set costBasis(value: BigDecimal) {
    this.set("costBasis", Value.fromBigDecimal(value));
  }

  get indexer(): string {
    let value = this.get("indexer");
    return value!.toString();
  }

  set indexer(value: string) {
    this.set("indexer", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lastPrice(): BigDecimal {
    let value = this.get("lastPrice");
    return value!.toBigDecimal();
  }

  set lastPrice(value: BigDecimal) {
    this.set("lastPrice", Value.fromBigDecimal(value));
  }

  get lastUpdateBlock(): BigInt {
    let value = this.get("lastUpdateBlock");
    return value!.toBigInt();
  }

  set lastUpdateBlock(value: BigInt) {
    this.set("lastUpdateBlock", Value.fromBigInt(value));
  }
}
