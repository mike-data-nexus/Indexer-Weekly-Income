// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContractSynced extends ethereum.Event {
  get params(): ContractSynced__Params {
    return new ContractSynced__Params(this);
  }
}

export class ContractSynced__Params {
  _event: ContractSynced;

  constructor(event: ContractSynced) {
    this._event = event;
  }

  get nameHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ParameterUpdated extends ethereum.Event {
  get params(): ParameterUpdated__Params {
    return new ParameterUpdated__Params(this);
  }
}

export class ParameterUpdated__Params {
  _event: ParameterUpdated;

  constructor(event: ParameterUpdated) {
    this._event = event;
  }

  get param(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class RewardsAssigned extends ethereum.Event {
  get params(): RewardsAssigned__Params {
    return new RewardsAssigned__Params(this);
  }
}

export class RewardsAssigned__Params {
  _event: RewardsAssigned;

  constructor(event: RewardsAssigned) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allocationID(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get epoch(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RewardsDenied extends ethereum.Event {
  get params(): RewardsDenied__Params {
    return new RewardsDenied__Params(this);
  }
}

export class RewardsDenied__Params {
  _event: RewardsDenied;

  constructor(event: RewardsDenied) {
    this._event = event;
  }

  get indexer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allocationID(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get epoch(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardsDenylistUpdated extends ethereum.Event {
  get params(): RewardsDenylistUpdated__Params {
    return new RewardsDenylistUpdated__Params(this);
  }
}

export class RewardsDenylistUpdated__Params {
  _event: RewardsDenylistUpdated;

  constructor(event: RewardsDenylistUpdated) {
    this._event = event;
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get sinceBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetController extends ethereum.Event {
  get params(): SetController__Params {
    return new SetController__Params(this);
  }
}

export class SetController__Params {
  _event: SetController;

  constructor(event: SetController) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RewardsManager__getAccRewardsPerAllocatedTokenResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class RewardsManager__subgraphsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getAccRewardsForSubgraph(): BigInt {
    return this.value0;
  }

  getAccRewardsForSubgraphSnapshot(): BigInt {
    return this.value1;
  }

  getAccRewardsPerSignalSnapshot(): BigInt {
    return this.value2;
  }

  getAccRewardsPerAllocatedToken(): BigInt {
    return this.value3;
  }
}

export class RewardsManager extends ethereum.SmartContract {
  static bind(address: Address): RewardsManager {
    return new RewardsManager("RewardsManager", address);
  }

  accRewardsPerSignal(): BigInt {
    let result = super.call(
      "accRewardsPerSignal",
      "accRewardsPerSignal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accRewardsPerSignal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accRewardsPerSignal",
      "accRewardsPerSignal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accRewardsPerSignalLastBlockUpdated(): BigInt {
    let result = super.call(
      "accRewardsPerSignalLastBlockUpdated",
      "accRewardsPerSignalLastBlockUpdated():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accRewardsPerSignalLastBlockUpdated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accRewardsPerSignalLastBlockUpdated",
      "accRewardsPerSignalLastBlockUpdated():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  denylist(param0: Bytes): BigInt {
    let result = super.call("denylist", "denylist(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_denylist(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("denylist", "denylist(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccRewardsForSubgraph(_subgraphDeploymentID: Bytes): BigInt {
    let result = super.call(
      "getAccRewardsForSubgraph",
      "getAccRewardsForSubgraph(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );

    return result[0].toBigInt();
  }

  try_getAccRewardsForSubgraph(
    _subgraphDeploymentID: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccRewardsForSubgraph",
      "getAccRewardsForSubgraph(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccRewardsPerAllocatedToken(
    _subgraphDeploymentID: Bytes
  ): RewardsManager__getAccRewardsPerAllocatedTokenResult {
    let result = super.call(
      "getAccRewardsPerAllocatedToken",
      "getAccRewardsPerAllocatedToken(bytes32):(uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );

    return new RewardsManager__getAccRewardsPerAllocatedTokenResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAccRewardsPerAllocatedToken(
    _subgraphDeploymentID: Bytes
  ): ethereum.CallResult<RewardsManager__getAccRewardsPerAllocatedTokenResult> {
    let result = super.tryCall(
      "getAccRewardsPerAllocatedToken",
      "getAccRewardsPerAllocatedToken(bytes32):(uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RewardsManager__getAccRewardsPerAllocatedTokenResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getAccRewardsPerSignal(): BigInt {
    let result = super.call(
      "getAccRewardsPerSignal",
      "getAccRewardsPerSignal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAccRewardsPerSignal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccRewardsPerSignal",
      "getAccRewardsPerSignal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNewRewardsPerSignal(): BigInt {
    let result = super.call(
      "getNewRewardsPerSignal",
      "getNewRewardsPerSignal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNewRewardsPerSignal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNewRewardsPerSignal",
      "getNewRewardsPerSignal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewards(_allocationID: Address): BigInt {
    let result = super.call("getRewards", "getRewards(address):(uint256)", [
      ethereum.Value.fromAddress(_allocationID)
    ]);

    return result[0].toBigInt();
  }

  try_getRewards(_allocationID: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getRewards", "getRewards(address):(uint256)", [
      ethereum.Value.fromAddress(_allocationID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isDenied(_subgraphDeploymentID: Bytes): boolean {
    let result = super.call("isDenied", "isDenied(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_subgraphDeploymentID)
    ]);

    return result[0].toBoolean();
  }

  try_isDenied(_subgraphDeploymentID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isDenied", "isDenied(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_subgraphDeploymentID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  issuanceRate(): BigInt {
    let result = super.call("issuanceRate", "issuanceRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_issuanceRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("issuanceRate", "issuanceRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumSubgraphSignal(): BigInt {
    let result = super.call(
      "minimumSubgraphSignal",
      "minimumSubgraphSignal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumSubgraphSignal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumSubgraphSignal",
      "minimumSubgraphSignal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onSubgraphAllocationUpdate(_subgraphDeploymentID: Bytes): BigInt {
    let result = super.call(
      "onSubgraphAllocationUpdate",
      "onSubgraphAllocationUpdate(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );

    return result[0].toBigInt();
  }

  try_onSubgraphAllocationUpdate(
    _subgraphDeploymentID: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "onSubgraphAllocationUpdate",
      "onSubgraphAllocationUpdate(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onSubgraphSignalUpdate(_subgraphDeploymentID: Bytes): BigInt {
    let result = super.call(
      "onSubgraphSignalUpdate",
      "onSubgraphSignalUpdate(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );

    return result[0].toBigInt();
  }

  try_onSubgraphSignalUpdate(
    _subgraphDeploymentID: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "onSubgraphSignalUpdate",
      "onSubgraphSignalUpdate(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subgraphAvailabilityOracle(): Address {
    let result = super.call(
      "subgraphAvailabilityOracle",
      "subgraphAvailabilityOracle():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_subgraphAvailabilityOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "subgraphAvailabilityOracle",
      "subgraphAvailabilityOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subgraphs(param0: Bytes): RewardsManager__subgraphsResult {
    let result = super.call(
      "subgraphs",
      "subgraphs(bytes32):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new RewardsManager__subgraphsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_subgraphs(
    param0: Bytes
  ): ethereum.CallResult<RewardsManager__subgraphsResult> {
    let result = super.tryCall(
      "subgraphs",
      "subgraphs(bytes32):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RewardsManager__subgraphsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  takeRewards(_allocationID: Address): BigInt {
    let result = super.call("takeRewards", "takeRewards(address):(uint256)", [
      ethereum.Value.fromAddress(_allocationID)
    ]);

    return result[0].toBigInt();
  }

  try_takeRewards(_allocationID: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "takeRewards",
      "takeRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_allocationID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateAccRewardsPerSignal(): BigInt {
    let result = super.call(
      "updateAccRewardsPerSignal",
      "updateAccRewardsPerSignal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_updateAccRewardsPerSignal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateAccRewardsPerSignal",
      "updateAccRewardsPerSignal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AcceptProxyCall extends ethereum.Call {
  get inputs(): AcceptProxyCall__Inputs {
    return new AcceptProxyCall__Inputs(this);
  }

  get outputs(): AcceptProxyCall__Outputs {
    return new AcceptProxyCall__Outputs(this);
  }
}

export class AcceptProxyCall__Inputs {
  _call: AcceptProxyCall;

  constructor(call: AcceptProxyCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptProxyCall__Outputs {
  _call: AcceptProxyCall;

  constructor(call: AcceptProxyCall) {
    this._call = call;
  }
}

export class AcceptProxyAndCallCall extends ethereum.Call {
  get inputs(): AcceptProxyAndCallCall__Inputs {
    return new AcceptProxyAndCallCall__Inputs(this);
  }

  get outputs(): AcceptProxyAndCallCall__Outputs {
    return new AcceptProxyAndCallCall__Outputs(this);
  }
}

export class AcceptProxyAndCallCall__Inputs {
  _call: AcceptProxyAndCallCall;

  constructor(call: AcceptProxyAndCallCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AcceptProxyAndCallCall__Outputs {
  _call: AcceptProxyAndCallCall;

  constructor(call: AcceptProxyAndCallCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _issuanceRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnSubgraphAllocationUpdateCall extends ethereum.Call {
  get inputs(): OnSubgraphAllocationUpdateCall__Inputs {
    return new OnSubgraphAllocationUpdateCall__Inputs(this);
  }

  get outputs(): OnSubgraphAllocationUpdateCall__Outputs {
    return new OnSubgraphAllocationUpdateCall__Outputs(this);
  }
}

export class OnSubgraphAllocationUpdateCall__Inputs {
  _call: OnSubgraphAllocationUpdateCall;

  constructor(call: OnSubgraphAllocationUpdateCall) {
    this._call = call;
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class OnSubgraphAllocationUpdateCall__Outputs {
  _call: OnSubgraphAllocationUpdateCall;

  constructor(call: OnSubgraphAllocationUpdateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnSubgraphSignalUpdateCall extends ethereum.Call {
  get inputs(): OnSubgraphSignalUpdateCall__Inputs {
    return new OnSubgraphSignalUpdateCall__Inputs(this);
  }

  get outputs(): OnSubgraphSignalUpdateCall__Outputs {
    return new OnSubgraphSignalUpdateCall__Outputs(this);
  }
}

export class OnSubgraphSignalUpdateCall__Inputs {
  _call: OnSubgraphSignalUpdateCall;

  constructor(call: OnSubgraphSignalUpdateCall) {
    this._call = call;
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class OnSubgraphSignalUpdateCall__Outputs {
  _call: OnSubgraphSignalUpdateCall;

  constructor(call: OnSubgraphSignalUpdateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetDeniedCall extends ethereum.Call {
  get inputs(): SetDeniedCall__Inputs {
    return new SetDeniedCall__Inputs(this);
  }

  get outputs(): SetDeniedCall__Outputs {
    return new SetDeniedCall__Outputs(this);
  }
}

export class SetDeniedCall__Inputs {
  _call: SetDeniedCall;

  constructor(call: SetDeniedCall) {
    this._call = call;
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _deny(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetDeniedCall__Outputs {
  _call: SetDeniedCall;

  constructor(call: SetDeniedCall) {
    this._call = call;
  }
}

export class SetDeniedManyCall extends ethereum.Call {
  get inputs(): SetDeniedManyCall__Inputs {
    return new SetDeniedManyCall__Inputs(this);
  }

  get outputs(): SetDeniedManyCall__Outputs {
    return new SetDeniedManyCall__Outputs(this);
  }
}

export class SetDeniedManyCall__Inputs {
  _call: SetDeniedManyCall;

  constructor(call: SetDeniedManyCall) {
    this._call = call;
  }

  get _subgraphDeploymentID(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get _deny(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class SetDeniedManyCall__Outputs {
  _call: SetDeniedManyCall;

  constructor(call: SetDeniedManyCall) {
    this._call = call;
  }
}

export class SetIssuanceRateCall extends ethereum.Call {
  get inputs(): SetIssuanceRateCall__Inputs {
    return new SetIssuanceRateCall__Inputs(this);
  }

  get outputs(): SetIssuanceRateCall__Outputs {
    return new SetIssuanceRateCall__Outputs(this);
  }
}

export class SetIssuanceRateCall__Inputs {
  _call: SetIssuanceRateCall;

  constructor(call: SetIssuanceRateCall) {
    this._call = call;
  }

  get _issuanceRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetIssuanceRateCall__Outputs {
  _call: SetIssuanceRateCall;

  constructor(call: SetIssuanceRateCall) {
    this._call = call;
  }
}

export class SetMinimumSubgraphSignalCall extends ethereum.Call {
  get inputs(): SetMinimumSubgraphSignalCall__Inputs {
    return new SetMinimumSubgraphSignalCall__Inputs(this);
  }

  get outputs(): SetMinimumSubgraphSignalCall__Outputs {
    return new SetMinimumSubgraphSignalCall__Outputs(this);
  }
}

export class SetMinimumSubgraphSignalCall__Inputs {
  _call: SetMinimumSubgraphSignalCall;

  constructor(call: SetMinimumSubgraphSignalCall) {
    this._call = call;
  }

  get _minimumSubgraphSignal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumSubgraphSignalCall__Outputs {
  _call: SetMinimumSubgraphSignalCall;

  constructor(call: SetMinimumSubgraphSignalCall) {
    this._call = call;
  }
}

export class SetSubgraphAvailabilityOracleCall extends ethereum.Call {
  get inputs(): SetSubgraphAvailabilityOracleCall__Inputs {
    return new SetSubgraphAvailabilityOracleCall__Inputs(this);
  }

  get outputs(): SetSubgraphAvailabilityOracleCall__Outputs {
    return new SetSubgraphAvailabilityOracleCall__Outputs(this);
  }
}

export class SetSubgraphAvailabilityOracleCall__Inputs {
  _call: SetSubgraphAvailabilityOracleCall;

  constructor(call: SetSubgraphAvailabilityOracleCall) {
    this._call = call;
  }

  get _subgraphAvailabilityOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSubgraphAvailabilityOracleCall__Outputs {
  _call: SetSubgraphAvailabilityOracleCall;

  constructor(call: SetSubgraphAvailabilityOracleCall) {
    this._call = call;
  }
}

export class SyncAllContractsCall extends ethereum.Call {
  get inputs(): SyncAllContractsCall__Inputs {
    return new SyncAllContractsCall__Inputs(this);
  }

  get outputs(): SyncAllContractsCall__Outputs {
    return new SyncAllContractsCall__Outputs(this);
  }
}

export class SyncAllContractsCall__Inputs {
  _call: SyncAllContractsCall;

  constructor(call: SyncAllContractsCall) {
    this._call = call;
  }
}

export class SyncAllContractsCall__Outputs {
  _call: SyncAllContractsCall;

  constructor(call: SyncAllContractsCall) {
    this._call = call;
  }
}

export class TakeRewardsCall extends ethereum.Call {
  get inputs(): TakeRewardsCall__Inputs {
    return new TakeRewardsCall__Inputs(this);
  }

  get outputs(): TakeRewardsCall__Outputs {
    return new TakeRewardsCall__Outputs(this);
  }
}

export class TakeRewardsCall__Inputs {
  _call: TakeRewardsCall;

  constructor(call: TakeRewardsCall) {
    this._call = call;
  }

  get _allocationID(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TakeRewardsCall__Outputs {
  _call: TakeRewardsCall;

  constructor(call: TakeRewardsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateAccRewardsPerSignalCall extends ethereum.Call {
  get inputs(): UpdateAccRewardsPerSignalCall__Inputs {
    return new UpdateAccRewardsPerSignalCall__Inputs(this);
  }

  get outputs(): UpdateAccRewardsPerSignalCall__Outputs {
    return new UpdateAccRewardsPerSignalCall__Outputs(this);
  }
}

export class UpdateAccRewardsPerSignalCall__Inputs {
  _call: UpdateAccRewardsPerSignalCall;

  constructor(call: UpdateAccRewardsPerSignalCall) {
    this._call = call;
  }
}

export class UpdateAccRewardsPerSignalCall__Outputs {
  _call: UpdateAccRewardsPerSignalCall;

  constructor(call: UpdateAccRewardsPerSignalCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
